Git 

Git: Version control system

Why do we need this?

problems without git
- not collaboration system
- merging manually
- not version control
- Risk of losing work


problem solved with git
- team collaboration
- branching & merging
- versions control
- no lost work
- fast development

what we can do with git
repo
clone
branches
commit
merge
rollback 
contribute open source
flexible environment
version control: modify, record, revert, compare, manage
manage and create remote repo.
data secure.
pull request to merge with main branch


limitations with other version control system?
- no centralized architecture
- changes can not be done offline.
- file are managed by central server.

why to use git over other version control system?
- everyone gets a full copy of the project on their machine
Note: git it only the one stop solution for all the problem.


What is git?
- version control(speed, security, data integrity)
- 2005 (create of Linux cornel)


install? -- done

launch the git bash
git --version (display the version of git)


3 configuration levels
- system level --system:
	- top level
	- /etc/git/config
	- git config --list --system
	- applicable to all the system on which git is installed.

- global level --global
	- next level after system
	- user specific settings
	- git config --list --global
	- /.gitcofig

- local level --local
	- git config --list --local
	- last level user repo level
	- .git/config

Note: local override the global and global override the system level.

fatal: --local can only be used inside a git repository
user.name
user.email


----------------------------------------------
class 2
change the default code editor to vscode: git config --global code.editor "code--wait"

check the configurations list: git config --list

Quiz
Q. What are the characteristics of a version control system? 

Select the correct answer 
A. Recording changes to a file or set of files over time 
B. Identifying who made the changes and when 
C. Comparing and reverting to a previous state 
D. All of the above   (C)


Q. Which of the following would be true of how a distributed version control system is used? 

Select the correct answer 
A. Each developer would manually copy their files into a time-stamped directory 
B. Every developer can check out project files from a central server, but would have to refer to the central server for project history details 
C. Every developer would have a local copy of the entire repository including files and project history   (C)
D. Every developer would have a local copy of the entire repository including files but excluding project history. 


Q. What are the three levels of configurations available in Git? 

Select the correct answer 
A. System, Global, and Local  (C)
B. System, Global, and User 
C. Global, User, and Repository 
D. User, System, and Global 

Create a git repo
create an empty directory --  (mkdir <dirName>)
convert the dir to repo  -- git init
to check the status -- git status
it will take you to branch master without any commit.

Note: git init command create an hidden directory that stores all the metadata required for it to function.

to show hidden folder of .git --  (ls -la)
to check the total number of files/folder -- ls -lrt
check the physical working directory  --- pwd
create and initialize dir at the same time -- git init <dirName>


git maintain 3 snapshots of a file in separate dir.
1. working directory- git init (git doesnot track the file.) 
	to tract a file we have to stage the file.

2. staging area: git add once the staging is done it stores the file into .git/index it called as staging or a index.
	it send back to another area or repo that is local repo.

3. local repo: git commit 

Note: while committing it is important to add a message string using the -m flag if missing a default editor opens and ask for the comment.

to check the logs -- git log
- commit id
- author
- date
- commit message

to check the logs in one line -- git log --oneline

----------------------------------------------
class 3
echo "Message" >> fileName -- to edit the file
echo "<html> </html>" >> index.html

cat filename -- the content of file

how to track between the stages.
Tracking is use to check the difference b/w the file.
Working dir, staging area, local repo

git diff:-  b/w modified file in working dir and its staging.
git diff --staged: diff b/w staged file and the last commit of same file
commits are identified by using pointers called as head.

3 version of file in repo
- last commit is made as head
- pen ultimate head is marked as head1
- next head will be head 2 and so on

NOTE: "git diff --staged" is similar to "git diff head"

it will difficult for use to count the number of heads so its best practice to use the hash code eg:

git diff <commit hash code>

Revert to early commit
git log
git checkout
git status
git reset










